import { useRef, useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import gsap from 'gsap';

export const AuthTransition = () => {
  const navigate = useNavigate();
  const formCardRef = useRef<HTMLDivElement>(null);
  const sideCardRef = useRef<HTMLDivElement>(null);

  // ÌòÑÏû¨ Îã®Í≥Ñ ÏÉÅÌÉú
  const [formStep, setFormStep] = useState<
    | 'login'
    | 'phoneAuth'
    | 'verification'
    | 'signUp'
    | 'signUpFinal'
    | 'findEmail'
    | 'findPassword'
    | 'oauthIntegration'
  >('login');

  // Ïπ¥Îìú Ïù¥Îèô Í±∞Î¶¨
  const DISTANCE = 481;

  // Ï¥àÍ∏∞ ÏúÑÏπò ÏÑ∏ÌåÖ (Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú)
  useEffect(() => {
    gsap.set(formCardRef.current, { x: 0 });
    gsap.set(sideCardRef.current, { x: 0 });
  }, []);

  // Ïò§Î•∏Ï™ΩÏúºÎ°ú Ïä¨ÎùºÏù¥Îìú ‚Üí Ïù∏Ï¶ù/ÌöåÏõêÍ∞ÄÏûÖ ÏßÑÏûÖÏö©
  const animateToRight = (targetStep: typeof formStep) => {
    const tl = gsap.timeline();

    tl.to(formCardRef.current, {
      x: DISTANCE,
      duration: 0.5,
      ease: 'power2.out',
      onUpdate: () => {
        const x = gsap.getProperty(formCardRef.current, 'x') as number;
        if (x > DISTANCE / 2 && formStep !== targetStep) {
          setFormStep(targetStep);
        }
      },
    });

    tl.to(
      sideCardRef.current,
      {
        x: -DISTANCE,
        duration: 0.5,
        ease: 'power2.out',
      },
      '<'
    );
  };

  // ÏôºÏ™ΩÏúºÎ°ú Ïä¨ÎùºÏù¥Îìú ‚Üí Î°úÍ∑∏Ïù∏ Î≥µÍ∑ÄÏö©
  const goToLogin = () => {
    // URL ÌååÎùºÎØ∏ÌÑ∞ Ï†ïÎ¶¨
    navigate('/login', { replace: true });
    
    const tl = gsap.timeline();

    tl.to(formCardRef.current, {
      x: 0,
      duration: 0.5,
      ease: 'power2.out',
      onUpdate: () => {
        const x = gsap.getProperty(formCardRef.current, 'x') as number;
        if (x < DISTANCE / 2 && formStep !== 'login') {
          setFormStep('login');
        }
      },
    });

    tl.to(
      sideCardRef.current,
      {
        x: 0,
        duration: 0.5,
        ease: 'power2.out',
      },
      '<'
    );
  };

  // Ï†ÑÌôîÎ≤àÌò∏ Ïù∏Ï¶ù ÏßÑÏûÖ (Ïï†ÎãàÎ©îÏù¥ÏÖò Ìè¨Ìï®)
  const goToPhoneAuth = () => animateToRight('phoneAuth');

  // Ïù∏Ï¶ùÎ≤àÌò∏ ÏûÖÎ†• Îã®Í≥Ñ (Í∞ôÏùÄ Ïπ¥Îìú ÎÇ¥ ÎÇ¥Î∂Ä Ï†ÑÌôò)
  const goToVerification = () => {
    console.log('üü° AuthTransition: formStepÏùÑ verificationÏúºÎ°ú Î≥ÄÍ≤Ω');
    setFormStep('verification');
  };

  // ÌöåÏõêÍ∞ÄÏûÖ ÏûÖÎ†• Îã®Í≥Ñ (Í∞ôÏùÄ Ïπ¥Îìú ÎÇ¥ ÎÇ¥Î∂Ä Ï†ÑÌôò)
  const goToSignUp = () => setFormStep('signUp');

  // ÌöåÏõêÍ∞ÄÏûÖ ÏôÑÎ£å Îã®Í≥Ñ (Í∞ôÏùÄ Ïπ¥Îìú ÎÇ¥ ÎÇ¥Î∂Ä Ï†ÑÌôò)
  const goToSignUpFinal = () => setFormStep('signUpFinal');

  // Ïù¥Î©îÏùº Ï∞æÍ∏∞ Í≤∞Í≥º ÌôîÎ©¥ (Ïï†ÎãàÎ©îÏù¥ÏÖò Ìè¨Ìï®)
  const goToFindEmail = () => animateToRight('findEmail');

  const goToFindPassword = () => animateToRight('findPassword');

  return {
    formStep,
    setFormStep,
    formCardRef,
    sideCardRef,
    goToLogin,
    goToPhoneAuth,
    goToVerification,
    goToSignUp,
    goToSignUpFinal,
    goToFindEmail,
    goToFindPassword,
  };
};
